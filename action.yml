name: Vault Approle Token extractor through Vault Broker API
description: Acquires a token to be used on vault through the broker API
branding:
  icon: package
  color: blue

inputs:
  ### Required
  broker_jwt:
    description: The JWT to be used on the broker
    required: true
  provision_role_id:
    description: The id of the role to be used during provisioning
    required: true
  project_name:
    description: Name of the project on vault, Ex. client
    required: true
  app_name:
    description: Name of the app on vault, Ex. app-client
    required: true
  environment:
    description: Name of the vault environment, Ex. development
    required: true

  ### Usually a bad idea / not recommended
  diff_branch:
    default: ${{ github.event.repository.default_branch }}
    description: Branch to diff against
  repository:
    default: ${{ github.repository }}
    description: Non-default repo to clone
  broker_url:
    default: https://nr-broker.apps.silver.devops.gov.bc.ca
    description: Something other than the default broker URL
  vault_addr:
    description: Something other than the default vault address
    default: https://vault-iit.apps.silver.devops.gov.bc.ca

outputs:
  vault_token:
    description: The vault token acquired by the action
    value: ${{ steps.broker.outputs.vault_token }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3

    # Process variables and inputs
    - id: broker
      name: Vault Broker
      shell: bash
      run: |
        read_and_delete(){
            if [[ -e $1 ]]; then
                local FILE_CONTENT=$(cat $1)
                rm -f $1
                echo $FILE_CONTENT
            else
                echo "Cannot find file $1"        
                exit 19
            fi
        }
        #Creating the intention template inline
        TEMPLATE="{
            \"event\": {
              \"provider\": \"\",
              \"reason\": \"Job triggered\",
              \"url\": \"\"
            },
            \"actions\": [{
              \"action\": \"package-provision\",
              \"id\": \"provision\",
              \"provision\": [\"approle/secret-id\"],
              \"service\": {
                \"name\": \"\",
                \"project\": \"\",
                \"environment\": \"\"
              }
            }],
            \"user\": {
                \"id\": \"\"
            }
          }"

        # Read the intention file and replace the event url and the user id
        PAYLOAD=$(echo ${TEMPLATE} | \
          jq ".event.url=\"${GITHUB_SERVER_URL}${GITHUB_ACTION_PATH}\" | \
          .user.id=\"${GITHUB_ACTOR}\" | \
          .event.provider=\"${{ github.repository }}-github-action\" | \
          .actions[0].service.name=\"${{ inputs.app_name }}\" | \
          .actions[0].service.project=\"${{ inputs.project_name }}\" | \
          .actions[0].service.environment=\"${{ inputs.environment }}\"")

        # Open an intention to the broker
        INTENTION=$(curl -o intention.txt -w "%{http_code}" -s -X POST ${{ inputs.broker_url }}/v1/intention/open \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.broker_jwt}}" \
          --data-raw "${PAYLOAD}")
        
        if [[ $INTENTION -eq 201 ]]; then
            INTENTION=$(read_and_delete intention.txt)
        else
          echo "::error title=Intention,line=96::Intention cannot be opened with provided jwt token"
          exit 19
        fi

        # Extract both the action and the intention token
        INTENTION_TOKEN=$(echo "${INTENTION}" | jq -r '.token')
        ACTION_TOKEN=$(echo "${INTENTION}" | jq -r '.actions.provision.token')

        # With the action token in hand, provision a secret id for our app role
        WRAPPED_DATA=$(curl -o wrappeddata.txt -w "%{http_code}" -s -X POST ${{ inputs.broker_url }}/v1/provision/approle/secret-id \
          -H "x-broker-token: "${ACTION_TOKEN}"" \
          -H "x-vault-role-id: "${{ inputs.provision_role_id }}"")
        
        if [[ $WRAPPED_DATA -eq 201 ]]; then
            WRAPPED_DATA=$(read_and_delete wrappeddata.txt)    
        else
            echo "::error title=Approle Secret,line=113::Approle secret cannot be acquired, invalid token"
            exit 19
        fi
            
        WRAPPED_TOKEN=$(echo ${WRAPPED_DATA} | jq -r '.wrap_info.token')

        # Unwrap the token to get the secret id
        SECRET_ID=$(curl -o secret.txt -w "%{http_code}" -s -X POST ${{ inputs.vault_addr }}/v1/sys/wrapping/unwrap \
          -H "X-Vault-Token: ${WRAPPED_TOKEN}"|jq '.data.secret_id')
        
        if [[ $SECRET_ID -eq 200 ]]; then
            SECRET_ID=$(read_and_delete secret.txt)
            SECRET_ID=$(echo ${SECRET_ID}|jq '.data.secret_id')
        else
            echo "::error title=Secret ID,line=127::Secret ID cannot be unwrapped"
            exit 19
        fi

        # Log into vault using the app role url, this will give us back the vault token we need to read the secrets
        LOGIN=$(curl -o login.txt -w "%{http_code}" -s -X POST ${{ inputs.vault_addr }}/v1/auth/vs_apps_approle/login \
          --data-raw '{ "role_id": "'${{ inputs.provision_role_id }}'", "secret_id": '${SECRET_ID}' }' \
          --header 'Content-Type: application/json')

        if [[ $LOGIN -eq 200 ]]; then
            LOGIN=$(read_and_delete login.txt)
            LOGIN=$(echo ${LOGIN} | jq -r '.auth.client_token')
        else
            echo "::error title=Vault Login,line=139::Cannot log into vault due to provision error"
            exit 19
        fi

        # Close the broker intention
        curl -s -X POST ${{ inputs.broker_url }}/v1/intention/close \
          -H 'Content-Type: application/json' \
          -H "x-broker-token: ${INTENTION_TOKEN}"

        # Forward the vault token to be consumed
        echo vault_token=${LOGIN} >> $GITHUB_OUTPUT

    - name: Checkout Action repo to pass tests
      uses: actions/checkout@v3
